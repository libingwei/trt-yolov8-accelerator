cmake_minimum_required(VERSION 3.18)
project(trt_yolov8_accelerator CXX CUDA)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CUDA_STANDARD 17)
set(CMAKE_CUDA_STANDARD_REQUIRED ON)

# Place executables under the build tree (./build/bin) to align with README usage
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
# Optionally build experimental plugins (disabled by default)
option(YOLO_BUILD_PLUGINS "Build experimental YOLO TensorRT plugins" OFF)


# CUDA
find_package(CUDAToolkit QUIET)
if(NOT CUDAToolkit_FOUND)
	find_package(CUDA REQUIRED)
	if(CUDA_FOUND)
		add_library(CUDA::cudart UNKNOWN IMPORTED)
		set_property(TARGET CUDA::cudart PROPERTY IMPORTED_LOCATION "${CUDA_CUDART_LIBRARY}")
		set_property(TARGET CUDA::cudart PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${CUDA_INCLUDE_DIRS}")
	else()
		message(FATAL_ERROR "CUDA not found")
	endif()
endif()

# TensorRT from parent project
if(NOT TENSORRT_INCLUDE_DIRS OR NOT TENSORRT_LIBRARY_DIRS)
	message(FATAL_ERROR "Expected TENSORRT_INCLUDE_DIRS/TENSORRT_LIBRARY_DIRS from parent CMake. Please configure at root.")
endif()
include_directories(${TENSORRT_INCLUDE_DIRS})

# OpenCV for image IO/preprocess (INT8 calibrator & optional infer demo)
find_package(OpenCV REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})

add_executable(onnx_to_trt_yolo
	src/onnx_to_trt_yolo.cpp
	src/yolo_int8_calibrator.cpp)
target_link_libraries(onnx_to_trt_yolo PRIVATE trt_utils ${OpenCV_LIBS})
target_compile_options(onnx_to_trt_yolo PRIVATE -Wno-deprecated-declarations)

add_executable(yolo_trt_infer src/yolo_trt_infer.cpp)
target_link_libraries(yolo_trt_infer PRIVATE trt_utils ${OpenCV_LIBS})
target_compile_options(yolo_trt_infer PRIVATE -Wno-deprecated-declarations)

if(YOLO_BUILD_PLUGINS)
	add_library(decode_yolo_plugin STATIC
		plugins/decode_yolo/decode_yolo_plugin.h)
	target_link_libraries(decode_yolo_plugin PRIVATE trt_utils)
	target_include_directories(decode_yolo_plugin PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/plugins)
	target_compile_features(decode_yolo_plugin PUBLIC cxx_std_17)
endif()

